{
  "resourceType": "TestScript",
  "id": "UFHV16-with-ACK",
  "meta": {
    "profile": [
      "http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript"
    ]
  },
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative</b></p><p><b>url</b>: <code>http://build.fhir.org/ig/hl7dk/dk-medcom/</code></p><p><b>version</b>: 0.1.0</p><p><b>name</b>: transferred to a private hospital</p><p><b>title</b>: Patient is admitted, transferred to a private hospital (or other department) not sending notifications, and finally discharged</p><p><b>status</b>: active</p><p><b>date</b>: 2021-10-22</p><p><b>publisher</b>: MedCom</p><p><b>contact</b>: MedCom: <a href=\"mailto:fhir@medcom.dk\">fhir@medcom.dk</a></p><p><b>description</b>: Testing correct use of correction</p><p><b>copyright</b>: MedCom 2021</p><h3>Origins</h3><table class=\"grid\"><tr><td>-</td><td><b>Index</b></td><td><b>Profile</b></td></tr><tr><td>*</td><td>1</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types FHIR-Client}\">FHIR Client</span></td></tr></table><h3>Destinations</h3><table class=\"grid\"><tr><td>-</td><td><b>Index</b></td><td><b>Profile</b></td></tr><tr><td>*</td><td>1</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types FHIR-Server}\">FHIR Server</span></td></tr></table><blockquote><p><b>fixture</b></p><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/401-Hospitalnotification/receive/Userstory/_reference/resources/STIN_16.xml\">/FHIRSandbox/MedCom/401-Hospitalnotification/receive/Userstory/_reference/resources/STIN_16.xml</a></p></blockquote><blockquote><p><b>fixture</b></p><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/401-Acknowledgement/_reference/resources/Acknowledgement-ok.xml\">/FHIRSandbox/MedCom/401-Acknowledgement/_reference/resources/Acknowledgement-ok.xml</a></p></blockquote><p><b>profile</b>: <a href=\"http://medcomfhir.dk/fhir/core/1.0/StructureDefinition/medcom-hospitalNotification-message\">http://medcomfhir.dk/fhir/core/1.0/StructureDefinition/medcom-hospitalNotification-message</a></p><blockquote><p><b>variable</b></p><p><b>name</b>: destinationUri</p><p><b>expression</b>: Bundle.entry.resource.ofType(MessageHeader).destination.endpoint</p><p><b>sourceId</b>: bundle-create-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: KorrektMHID</p><p><b>expression</b>: Bundle.entry.resource.ofType(Bundle).id</p><p><b>sourceId</b>: bundle-get-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: bundleResourceid</p><p><b>expression</b>: Bundle.id</p><p><b>sourceId</b>: bundle-create-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: MessageHeaderIdentifier</p><p><b>expression</b>: Bundle.entry[0].fullUrl</p><p><b>sourceId</b>: bundle-create-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: ProvenanceID</p><p><b>expression</b>: Bundle.entry.resource.ofType(Provenance).id</p><p><b>sourceId</b>: bundle-create-STIN</p></blockquote><blockquote><p><b>setup</b></p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Accept</b></td><td><b>EncodeRequestUrl</b></td><td><b>Params</b></td></tr><tr><td>*</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-operation-codes delete}\">Delete</span></td><td>Bundle</td><td>System-generated search and delete operations from conditional delete on Bundle MessageHeader).destination.endpoint</td><td>xml</td><td>true</td><td>?message.destination-uri=${destinationUri}</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Accept</b></td><td><b>ContentType</b></td><td><b>EncodeRequestUrl</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-operation-codes create}\">Create</span></td><td>Bundle</td><td>Create the Bundle resource in XML format on the destination server.</td><td>xml</td><td>xml</td><td>true</td><td>bundle-create-STIN</td></tr></table></blockquote></blockquote><blockquote><p><b>test</b></p><p><b>name</b>: HospitalNotification-STIN</p><p><b>description</b>: GET a Hospital notification. The expected response is a 200(OK) with a payload of the Hospital notification resource in XML format.</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Accept</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>Params</b></td><td><b>ResponseId</b></td></tr><tr><td>*</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-operation-codes read}\">Read</span></td><td>Bundle</td><td>Receive notification about admission -STIN</td><td>xml</td><td>1</td><td>true</td><td>1</td><td>?message.destination-uri=${destinationUri}</td><td>bundle-get-STIN</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>ResponseCode</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the returned HTTP status is 200(OK).</td><td>response</td><td>200</td><td>false</td></tr></table></blockquote></blockquote><blockquote><p><b>test</b></p><p><b>name</b>: 3 Post Acknowledgement-bundle-create-STIN</p><p><b>description</b>: GET ACK</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Accept</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-operation-codes create}\">Create</span></td><td>Bundle</td><td>Post a acknowledgement</td><td>xml</td><td>1</td><td>true</td><td>1</td><td>bundle-create-ack-OK</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Resource</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the client request payload contains a Bundle resource type.</td><td>request</td><td>Bundle</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the MessageHeader response code is OK</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).response.code</td><td>equals</td><td>ok</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected evetCoding code.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'acknowledgment-message').allTrue()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Bundle not containing a OperationOutcome</td><td>request</td><td>Bundle.entry.resource.ofType(OperationOutcome).exists().not()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the MessageHeader.response.identifier is equal to Id of original message </td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).response.identifier</td><td>equals</td><td>${bundleResourceid}</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the reference original Provenance.entity.what is equal to Id of original messageheader.identifier</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(entity.what.reference ='${MessageHeaderIdentifier}')</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the there are two Provenances</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).count() = 2</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the id of the original message provenance exist in the ack</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(id='${ProvenanceID}').exists()</td><td>false</td></tr></table></blockquote></blockquote><blockquote><p><b>test</b></p><p><b>name</b>: TestOfId</p><p><b>description</b>: GET ACK</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Accept</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td><span title=\"{http://terminology.hl7.org/CodeSystem/testscript-operation-codes create}\">Create</span></td><td>Bundle</td><td>Post a acknowledgement</td><td>xml</td><td>1</td><td>true</td><td>1</td><td>bundle-create-ack-OK</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the MessageHeader.response.identifier is equal to Id of original message </td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).response.identifier</td><td>equals</td><td>${KorrektMHID}</td><td>false</td></tr></table></blockquote></blockquote></div>"
  },
  "url": "http://build.fhir.org/ig/hl7dk/dk-medcom/",
  "version": "0.1.0",
  "name": "transferred to a private hospital",
  "title": "Patient is admitted, transferred to a private hospital (or other department) not sending notifications, and finally discharged",
  "status": "active",
  "date": "2021-10-22",
  "publisher": "MedCom",
  "contact": [
    {
      "name": "MedCom",
      "telecom": [
        {
          "system": "email",
          "value": "fhir@medcom.dk"
        }
      ]
    }
  ],
  "description": "Testing correct use of correction",
  "copyright": "MedCom 2021",
  "origin": [
    {
      "index": 1,
      "profile": {
        "system": "http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types",
        "code": "FHIR-Client"
      }
    }
  ],
  "destination": [
    {
      "index": 1,
      "profile": {
        "system": "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
        "code": "FHIR-Server"
      }
    }
  ],
  "fixture": [
    {
      "id": "bundle-create-STIN",
      "autocreate": false,
      "autodelete": false,
      "resource": {
        "reference": "/FHIRSandbox/MedCom/401-Hospitalnotification/receive/Userstory/_reference/resources/STIN_16.xml"
      }
    },
    {
      "id": "bundle-create-ack-OK",
      "autocreate": false,
      "autodelete": false,
      "resource": {
        "reference": "/FHIRSandbox/MedCom/401-Acknowledgement/_reference/resources/Acknowledgement-ok.xml"
      }
    }
  ],
  "profile": [
    {
      "id": "hospitalnotification-profile",
      "reference": "http://medcomfhir.dk/fhir/core/1.0/StructureDefinition/medcom-hospitalNotification-message"
    }
  ],
  "variable": [
    {
      "name": "destinationUri",
      "expression": "Bundle.entry.resource.ofType(MessageHeader).destination.endpoint",
      "sourceId": "bundle-create-STIN"
    },
    {
      "name": "KorrektMHID",
      "expression": "Bundle.entry.resource.ofType(Bundle).id",
      "sourceId": "bundle-get-STIN"
    },
    {
      "name": "bundleResourceid",
      "expression": "Bundle.id",
      "sourceId": "bundle-create-STIN"
    },
    {
      "name": "MessageHeaderIdentifier",
      "expression": "Bundle.entry[0].fullUrl",
      "sourceId": "bundle-create-STIN"
    },
    {
      "name": "ProvenanceID",
      "expression": "Bundle.entry.resource.ofType(Provenance).id",
      "sourceId": "bundle-create-STIN"
    }
  ],
  "setup": {
    "action": [
      {
        "operation": {
          "type": {
            "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
            "code": "delete"
          },
          "resource": "Bundle",
          "description": "System-generated search and delete operations from conditional delete on Bundle MessageHeader).destination.endpoint",
          "accept": "xml",
          "encodeRequestUrl": true,
          "params": "?message.destination-uri=${destinationUri}"
        }
      },
      {
        "operation": {
          "type": {
            "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
            "code": "create"
          },
          "resource": "Bundle",
          "description": "Create the Bundle resource in XML format on the destination server.",
          "accept": "xml",
          "contentType": "xml",
          "encodeRequestUrl": true,
          "sourceId": "bundle-create-STIN"
        }
      }
    ]
  },
  "test": [
    {
      "id": "01-STIN-admitted",
      "name": "HospitalNotification-STIN",
      "description": "GET a Hospital notification. The expected response is a 200(OK) with a payload of the Hospital notification resource in XML format.",
      "action": [
        {
          "operation": {
            "type": {
              "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
              "code": "read"
            },
            "resource": "Bundle",
            "description": "Receive notification about admission -STIN",
            "accept": "xml",
            "destination": 1,
            "encodeRequestUrl": true,
            "origin": 1,
            "params": "?message.destination-uri=${destinationUri}",
            "responseId": "bundle-get-STIN"
          }
        },
        {
          "assert": {
            "description": "Confirm that the returned HTTP status is 200(OK).",
            "direction": "response",
            "responseCode": "200",
            "warningOnly": false
          }
        }
      ]
    },
    {
      "id": "3ACK-bundle-create-STIN",
      "name": "3 Post Acknowledgement-bundle-create-STIN",
      "description": "GET ACK",
      "action": [
        {
          "operation": {
            "type": {
              "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
              "code": "create"
            },
            "resource": "Bundle",
            "description": "Post a acknowledgement",
            "accept": "xml",
            "destination": 1,
            "encodeRequestUrl": true,
            "origin": 1,
            "sourceId": "bundle-create-ack-OK"
          }
        },
        {
          "assert": {
            "description": "Confirm that the client request payload contains a Bundle resource type.",
            "direction": "request",
            "resource": "Bundle",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the MessageHeader response code is OK",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(MessageHeader).response.code",
            "operator": "equals",
            "value": "ok",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the request resource contains the expected evetCoding code.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'acknowledgment-message').allTrue()",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the Bundle not containing a OperationOutcome",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(OperationOutcome).exists().not()",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the MessageHeader.response.identifier is equal to Id of original message ",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(MessageHeader).response.identifier",
            "operator": "equals",
            "value": "${bundleResourceid}",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the reference original Provenance.entity.what is equal to Id of original messageheader.identifier",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).where(entity.what.reference ='${MessageHeaderIdentifier}')",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the there are two Provenances",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).count() = 2",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the id of the original message provenance exist in the ack",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).where(id='${ProvenanceID}').exists()",
            "warningOnly": false
          }
        }
      ]
    },
    {
      "id": "checkIDForNew",
      "name": "TestOfId",
      "description": "GET ACK",
      "action": [
        {
          "operation": {
            "type": {
              "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
              "code": "create"
            },
            "resource": "Bundle",
            "description": "Post a acknowledgement",
            "accept": "xml",
            "destination": 1,
            "encodeRequestUrl": true,
            "origin": 1,
            "sourceId": "bundle-create-ack-OK"
          }
        },
        {
          "assert": {
            "description": "Confirm that the MessageHeader.response.identifier is equal to Id of original message ",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(MessageHeader).response.identifier",
            "operator": "equals",
            "value": "${KorrektMHID}",
            "warningOnly": false
          }
        }
      ]
    }
  ]
}